train_day_len 训练数据总天数 int
result_dict 每一种虚拟机在训练数据中的总需求/平均需求 
flavor_dict 训练数据中每一天每一种虚拟机需求数量
last_pc 物理服务器类型参数 list
flavor_need 服务器需求量 
time_need 预测的时间，未分割
caple_class 预测的资源类型 str
flavor_num 需要预测的虚拟机总数 int
last_flavor 需要预测的虚拟机名称
last_flavor_cpu 需要预测的虚拟机对应的cpu数量
last_flavor_mem 需要预测的虚拟机对应的内存数量
last_time_need 需要预测的时间，已分割
flavor_result 存放预测的虚拟机在服务器中的分配，作为result的一部分
flavor_need_dict 最后预测出来的虚拟机集合
all_flavor_num 最后预测出来的虚拟机总数
------
tar -zcvf./liyueteng.tar.gz src/ecs/*.py 
打包命令，在huawei文件夹目录下执行
python ecs.py ./TrainData_2015.1.1_2015.2.19.txt ./input_5flavors_cpu_7days.txt ./output.txt

运行命令，在/huawei/src/ecs 下执行

实验 15个虚拟机会让服务器耗尽
26天 80.878
24天 80.97
23天 83.452
22天 84.722
21天 84.758

6个及以上末尾虚拟机能达到最好效果
记录：现在出现的情况是只要需要重新开启服务器就会出现死循环：原因：开启服务器后忘记更新服务器资源剩余值。
给的日期是近3-5年的也就是最早不超过2012，最晚不超过2017年，所以我们只需要考虑6年的节假日。节假日出现了预期中没有的服务器
2012-01-22,2013-02-09,2014-01-30， 2015-02-18， 2016-02-07， 2017-01-27
我们不需要所有的资源都预测准确，我们只需要预测那些资源利用比较大的就可以了，这样其实是利用了求分数的漏洞
